<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | /home/matstani/weblog]]></title>
  <link href="http://matstani.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://matstani.github.com/"/>
  <updated>2013-03-01T22:09:00+09:00</updated>
  <id>http://matstani.github.com/</id>
  <author>
    <name><![CDATA[Shunsaku MATSUTANI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[lib-noirを利用したフォームバリデーション]]></title>
    <link href="http://matstani.github.com/blog/2013/02/28/validation-with-lib-noir/"/>
    <updated>2013-02-28T13:02:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/02/28/validation-with-lib-noir</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/weavejester/compojure">Compojure</a>プロジェクトの作成手順は<a href="/blog/2013/01/23/create-compojure-project/">こちら</a></p>

<p>Compojureベースのウェブアプリケーションで、フォームバリデーションを行います。</p>

<p>ウェブアプリケーション用ライブラリ<a href="https://github.com/noir-clojure/lib-noir">lib-noir</a>を利用するコードを紹介します。</p>

<h4>依存ライブラリのインストール</h4>

<p>lib-noirとHTML生成ライブラリの<a href="https://github.com/weavejester/hiccup">Hiccup</a>を追記します。
<div><script src='https://gist.github.com/5055544.js?file=project.clj'></script>
<noscript><pre><code>(defproject helloworld &quot;0.1.0-SNAPSHOT&quot;
  :description &quot;FIXME: write description&quot;
  :url &quot;http://example.com/FIXME&quot;
  :dependencies [[org.clojure/clojure &quot;1.4.0&quot;]
                 [compojure &quot;1.1.5&quot;]
                 [lib-noir &quot;0.4.6&quot;]
                 [hiccup &quot;1.0.2&quot;]]
  :plugins [[lein-ring &quot;0.8.2&quot;]]
  :ring {:handler helloworld.handler/app}
  :profiles
  {:dev {:dependencies [[ring-mock &quot;0.1.3&quot;]]}})</code></pre></noscript></div>
</p>

<p>:dependenciesに追記後、以下のコマンドでライブラリをインストールします。
<code>
$ lein deps
</code></p>

<h4>lib-noir/validationを使ってフォームバリデーション</h4>

<p>フォームからPOSTされた日付データ、時刻データを、正規表現でチェックするコードです。バリデーションが失敗した場合は、エラーメッセージを表示しています。
<div><script src='https://gist.github.com/5055544.js?file=handler.clj'></script>
<noscript><pre><code>(ns helloworld.handler
  (:use compojure.core)
  (:require [compojure.handler :as handler]
            [compojure.route :as route]
            [hiccup.form :as form]
            [hiccup.core :refer [html]]
            [noir.validation :as vali]))

;; レイアウト                                                                                                                                                     
(defn layout [&amp; content]
  (html
   [:head [:title &quot;Form validation using lib-noir.&quot;]]
   [:body
    content]))

;; エラーメッセージ                                                                                                                                               
(defn error-message [[first-error]]
  [:span.error first-error])

;; 日付・時刻をPOSTするフォーム                                                                                                                                   
(defn date-time-form [&amp; [{:keys [date time]}]]
  (layout
    (form/form-to
     [:post &quot;.&quot;]
     [:div
      (form/label &quot;date&quot; &quot;日付&quot;)
      (form/text-field &quot;date&quot; date)
      ;; バリデーション失敗時はエラーメッセージ                                                                                                                   
      (vali/on-error :date error-message)]
     [:div
      (form/label &quot;time&quot; &quot;時刻&quot;)
      (form/text-field &quot;time&quot; time)
      ;; バリデーション失敗時はエラーメッセージ                                                                                                                   
      (vali/on-error :time error-message)]
     [:div (form/submit-button &quot;送信&quot;)])))

;;日付チェック用正規表現                                                                                                                                          
(def regex-date-pattern
  (re-pattern &quot;^\\d{4}/(1[0-2]|0?[1-9])/(0?[1-9]|[1-2][0-9]|3[01])$&quot;))

;;時刻チェック用正規表現                                                                                                                                          
(def regex-time-pattern
  (re-pattern &quot;^([01]?[0-9]|2[0-3]):([0-5][0-9])$&quot;))

;;POSTデータのバリデーションルール                                                                                                                                
(defn valid-date-time? [{:keys [date time]}]
  ;; dateをバリデート                                                                                                                                             
  (vali/rule (re-matches regex-date-pattern date)
             ;; 失敗したら :date にエラーメッセージ追加                                                                                                           
             [:date &quot;日付を入力してください(yyyy/MM/dd)&quot;])
  ;; timeをバリデート                                                                                                                                             
  (vali/rule (re-matches regex-time-pattern time)
             ;; 失敗したら :time にエラーメッセージ追加                                                                                                           
             [:time &quot;時刻を入力してください(HH:mm)&quot;])
  ;; バリデーション結果を返す                                                                                                                                     
  (not (vali/errors? :date :time)))

;; POSTされた値を表示                                                                                                                                             
(defn show-date-time [{:keys [date time]}]
  (layout
   [:p (str &quot;日付は「&quot; date &quot;」です。&quot;)]
   [:p (str &quot;時刻は「&quot; time &quot;」です。&quot;)]))

(defroutes app-routes
  (GET &quot;/&quot; [] (date-time-form))
  (POST &quot;/&quot; {param :params}
        (if (valid-date-time? param)
          ;; バリデーション成功                                                                                                                                   
          (show-date-time param)
          ;; バリデーション失敗                                                                                                                                   
          (date-time-form param)))
  (route/not-found &quot;Not Found&quot;))

(def app
  (-&gt; app-routes
      ;;バリデーション用ミドルウェア                                                                                                                              
      vali/wrap-noir-validation
      handler/site))
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KormaでDBアクセス]]></title>
    <link href="http://matstani.github.com/blog/2013/01/23/using-db-from-compojure-using-korma/"/>
    <updated>2013-01-23T19:41:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/01/23/using-db-from-compojure-using-korma</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/weavejester/compojure">Compojure</a>プロジェクトの作成手順は<a href="/blog/2013/01/23/create-compojure-project/">こちら</a></p>

<p>Compojureベースのウェブアプリケーションで、データベースから読みだした値を表示してみます。</p>

<p><a href="http://clojure.github.com/java.jdbc/">ClojureのJDBCラッパー</a>も十分に高機能なのですが、より柔軟にSQLを構築できる<a href="https://github.com/korma/Korma">Korma</a>というライブラリを使う手順を紹介します。なお、以下の手順では<a href="http://www.sqlite.org/">SQLite</a>を使っています。</p>

<h4>データベース準備</h4>

<p><code>
$ mkdir db
$ sqlite3 db/helloworld.sqlite3 "CREATE TABLE items (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT);"
$ sqlite3 db/helloworld.sqlite3 "INSERT INTO items (title) VALUES ('最初のアイテム');"
$ sqlite3 db/helloworld.sqlite3 "INSERT INTO items (title) VALUES ('2つ目のアイテム');"
</code></p>

<h4>依存ライブラリインストール</h4>

<p>project.cljの:dependenciesにJDBCドライバーとKorma、HTML生成ライブラリの<a href="https://github.com/weavejester/hiccup">Hiccup</a>を追記します。
<div><script src='https://gist.github.com/5048794.js?file=project.clj'></script>
<noscript><pre><code>(defproject helloworld &quot;0.1.0-SNAPSHOT&quot;
  :description &quot;FIXME: write description&quot;
  :url &quot;http://example.com/FIXME&quot;
  :dependencies [[org.clojure/clojure &quot;1.4.0&quot;]
                 [compojure &quot;1.1.5&quot;]
                 [org.xerial/sqlite-jdbc &quot;3.7.2&quot;]
                 [korma &quot;0.3.0-RC2&quot;]
                 [hiccup &quot;1.0.2&quot;]]
  :plugins [[lein-ring &quot;0.8.2&quot;]]
  :ring {:handler helloworld.handler/app}
  :profiles
  {:dev {:dependencies [[ring-mock &quot;0.1.3&quot;]]}})</code></pre></noscript></div>
</p>

<p>:dependenciesに追記後、以下のコマンドでライブラリをインストールします。
<code>
$ lein deps
</code></p>

<h4>Kormaを使ってデータベースから読み出し</h4>

<p><div><script src='https://gist.github.com/5048794.js?file=handler.clj'></script>
<noscript><pre><code>(ns helloworld.handler
  (:require [compojure.core :refer :all]
            [compojure.handler :as handler]
            [compojure.route :as route]
            [korma.db :refer [defdb sqlite3]]
            [korma.core :as korma]
            [hiccup.core :refer [html]]))

;;データベース定義
(defdb db (sqlite3
           ;;データベースファイルのパスを指定
           {:db &quot;db/helloworld.sqlite3&quot;}))

;;itemsテーブルに対応するEntity定義
(korma/defentity items)

;;itemsテーブルから全てのレコードを読み出し
(def all-items (korma/select items))

;;htmlのリストに変換する関数
(defn to-html [items]
  (html
   [:head [:title &quot;Access DB using Korma.&quot;]]
   [:body
     [:ul
       (map (fn [i] [:li (:title i)]) items)]]))

(defroutes app-routes
  ;;データベースから読みだしたレコードをリストに変換して表示
  (GET &quot;/&quot; [] (to-html all-items))
  (route/not-found &quot;Not Found&quot;))

(def app
  (handler/site app-routes))
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojureインストール、Compojureプロジェクト作成]]></title>
    <link href="http://matstani.github.com/blog/2013/01/23/create-compojure-project/"/>
    <updated>2013-01-23T18:05:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/01/23/create-compojure-project</id>
    <content type="html"><![CDATA[<p><a href="http://clojure.org/">Clojure</a>には、<a href="http://leiningen.org/">Leiningen</a>という管理ツールがあり、Clojure本体のインストールや、各種ライブラリのインストール、プロジェクトの作成などがとても簡単にできるようになっています。</p>

<p>Clojureがインストールされていない状態から、ウェブアプリケーションフレームワーク<a href="https://github.com/weavejester/compojure">Compojure</a>を利用したウェブアプリケーションの開発用プロジェクトを作成するまでの手順は以下のとおりです。</p>

<h4>Javaがインストールされていることを確認</h4>

<p><code>
$ java -version
</code></p>

<h4>Leiningenインストール</h4>

<h5>leinスクリプトをダウンロード</h5>

<p><code>
$ curl -O https://raw.github.com/technomancy/leiningen/stable/bin/lein
</code></p>

<h5>ダウンロードしたスクリプトをPATHの通った場所に置き、実行権を付与</h5>

<p><code>
$ mv lein ~/bin
$ chmod 755 ~/bin/lein
</code></p>

<h4>compojureプロジェクトの作成（初回は時間かかる）</h4>

<p><code>
$ lein new compojure helloworld
</code></p>

<h4>開発用HTTPサーバ起動（初回は時間かかる）</h4>

<p><code>
$ cd helloworld
$ lein ring server-headless
</code></p>

<p>Port3000でHTTPサーバが起動されるので、ブラウザで確認します。</p>
]]></content>
  </entry>
  
</feed>
