<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | /home/matstani/weblog]]></title>
  <link href="http://matstani.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://matstani.github.com/"/>
  <updated>2013-05-15T16:08:13+09:00</updated>
  <id>http://matstani.github.com/</id>
  <author>
    <name><![CDATA[Shunsaku MATSUTANI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[screen内のEmacsでparedit.elを使う]]></title>
    <link href="http://matstani.github.com/blog/2013/05/15/paredit-with-screen-emacs/"/>
    <updated>2013-05-15T15:23:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/05/15/paredit-with-screen-emacs</id>
    <content type="html"><![CDATA[<p>Clojureなど、Lisp系言語の編集に便利な<a href="http://emacswiki.org/emacs/ParEdit">paredit.el</a>ですが、<a href="http://www.gnu.org/software/screen/">GNU screen</a>内で起動した<a href="http://www.gnu.org/software/emacs/">Emacs</a>で利用しようとしたところ、Ctrl-矢印キーが使えず(5C, 5Dなどと入力される)、飲み込みや吐き出しの操作ができませんでした。</p>

<p>emacs起動時のコマンドでTERM変数を指定しておくと、とりあえず解決するようです。
<code>
TERM=xterm emacs -nw somefile
</code></p>

<p>参考にしたURL
<a href="http://lists.gnu.org/archive/html/screen-users/2009-12/msg00037.html">http://lists.gnu.org/archive/html/screen-users/2009-12/msg00037.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojureのuseをrequireで置き換える]]></title>
    <link href="http://matstani.github.com/blog/2013/05/10/clojure-require-use/"/>
    <updated>2013-05-10T18:41:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/05/10/clojure-require-use</id>
    <content type="html"><![CDATA[<p>Clojureで他の名前空間を参照する方法として、requireとuseがありますが、Clojure1.4以降では、require単独でuseと同様にプレフィックス無しでの参照ができるようになっています。</p>

<p>requireにまとめることで、コードが若干すっきりするかもしれません。</p>

<p><div><script src='https://gist.github.com/5553626.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure開発環境インストール手順(Emacs)]]></title>
    <link href="http://matstani.github.com/blog/2013/04/19/clojure-dev-env-emacs/"/>
    <updated>2013-04-19T18:29:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/04/19/clojure-dev-env-emacs</id>
    <content type="html"><![CDATA[<p>推奨環境、手順はこまめに変化するようなので、2013年4月時点での手順のメモ。<br/>
利用するのは、<a href="http://www.gnu.org/software/emacs/">Emacs</a>+<a href="https://github.com/kingtim/nrepl.el">nrepl.el</a>。<br/>
ちなみに、<a href="http://shop.oreilly.com/product/0636920013754.do">Clojure Programming</a>で紹介されているSLIME, swankの利用はdeprecatedとのこと。</p>

<h3>Javaのインストール</h3>

<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">オラクルのサイト</a></li>
<li>OpenJDKをインストールする場合</li>
</ul>


<p>Ubuntuの場合
<code>
$ sudo apt-get install openjdk-7-jdk
</code>
CentOSの場合
<code>
$ sudo yum install java-1.7.0-openjdk
</code></p>

<h3>leiningenインストール</h3>

<p><code>
$ curl -O https://raw.github.com/technomancy/leiningen/stable/bin/lein  
$ mv lein ~/bin  
$ chmod 755 ~/bin/lein  
</code></p>

<h3>Emacsのインストール</h3>

<p>Emacs24以降のバージョンを利用すると、パッケージ管理システムが標準で同梱されているので、以降の手順が簡単。</p>

<ul>
<li><a href="http://gihyo.jp/admin/serial/01/ubuntu-recipe/0235">Ubuntuにインストール</a></li>
<li><a href="http://dqn.sakusakutto.jp/2012/06/centos62emacs241install.html">CentOSにインストール</a></li>
</ul>


<h3>.emacsに以下追記</h3>

<p><div><script src='https://gist.github.com/5419420.js'></script>
<noscript><pre><code></code></pre></noscript></div>

追記後、Emacs上で以下のコマンドを実行すると、直ちに有効になる。
<code>
M-x eval-buffer
</code></p>

<p>ここでインストールされるパッケージは以下のとおり。</p>

<ul>
<li><a href="https://github.com/technomancy/clojure-mode">clojure-mode.el</a><br/>
Clojure編集の基本機能を追加するモード。インデントやシンタックスハイライトなど。</li>
<li><a href="http://emacswiki.org/emacs/ParEdit">paredit.el</a><br/>
括弧のペアを管理してくれるモード。開き括弧の入力時に自動的に閉じ括弧を入れてくれたり、括弧(S式)単位での編集ができたり。<br/>
動作が直感的でないところもあるので、<a href="http://www.daregada.sakuraweb.com/paredit_tutorial_ja.html">チュートリアル</a>で勉強。</li>
<li><a href="https://github.com/kingtim/nrepl.el">nrepl.el</a><br/>
Emacsから、<a href="https://github.com/clojure/tools.nrepl">nREPL</a>(ネットワーク経由で利用できるREPL)にアクセスするための機能。<br/>
nREPLサーバをアプリケーションに組み込んでおくと、動作中のアプリケーションの情報を取得したり、動的にパッチを当てたり、色々できる。</li>
<li><a href="http://www.emacswiki.org/emacs/RainbowDelimiters">rainbow-delimiters.el</a><br/>
Lispにありがちな多重括弧を、キレイに色付けしてくれるモード。</li>
</ul>


<h3>Clojureプロジェクト作成</h3>

<p><code>
$ lein new demo
</code></p>

<h3>Emacs上でnREPL起動</h3>

<p><code>
$ cd demo
$ emacs src/demo/core.clj
</code>
Emacs上で
<code>
M-x nrepl-jack-in
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lib-noirを利用したフォームバリデーション]]></title>
    <link href="http://matstani.github.com/blog/2013/02/28/validation-with-lib-noir/"/>
    <updated>2013-02-28T13:02:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/02/28/validation-with-lib-noir</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/weavejester/compojure">Compojure</a>プロジェクトの作成手順は<a href="/blog/2013/01/23/create-compojure-project/">こちら</a></p>

<p>Compojureベースのウェブアプリケーションで、フォームバリデーションを行います。</p>

<p>ウェブアプリケーション用ライブラリ<a href="https://github.com/noir-clojure/lib-noir">lib-noir</a>を利用するコードを紹介します。</p>

<h4>依存ライブラリのインストール</h4>

<p>lib-noirとHTML生成ライブラリの<a href="https://github.com/weavejester/hiccup">Hiccup</a>を追記します。
<div><script src='https://gist.github.com/5055544.js?file=project.clj'></script>
<noscript><pre><code>(defproject helloworld &quot;0.1.0-SNAPSHOT&quot;
  :description &quot;FIXME: write description&quot;
  :url &quot;http://example.com/FIXME&quot;
  :dependencies [[org.clojure/clojure &quot;1.4.0&quot;]
                 [compojure &quot;1.1.5&quot;]
                 [lib-noir &quot;0.4.6&quot;]
                 [hiccup &quot;1.0.2&quot;]]
  :plugins [[lein-ring &quot;0.8.2&quot;]]
  :ring {:handler helloworld.handler/app}
  :profiles
  {:dev {:dependencies [[ring-mock &quot;0.1.3&quot;]]}})</code></pre></noscript></div>
</p>

<p>:dependenciesに追記後、以下のコマンドでライブラリをインストールします。
<code>
$ lein deps
</code></p>

<h4>lib-noir/validationを使ってフォームバリデーション</h4>

<p>フォームからPOSTされた日付データ、時刻データを、正規表現でチェックするコードです。バリデーションが失敗した場合は、エラーメッセージを表示しています。
<div><script src='https://gist.github.com/5055544.js?file=handler.clj'></script>
<noscript><pre><code>(ns helloworld.handler
  (:use compojure.core)
  (:require [compojure.handler :as handler]
            [compojure.route :as route]
            [hiccup.form :as form]
            [hiccup.core :refer [html]]
            [noir.validation :as vali]))

;; レイアウト                                                                                                                                                     
(defn layout [&amp; content]
  (html
   [:head [:title &quot;Form validation using lib-noir.&quot;]]
   [:body
    content]))

;; エラーメッセージ                                                                                                                                               
(defn error-message [[first-error]]
  [:span.error first-error])

;; 日付・時刻をPOSTするフォーム                                                                                                                                   
(defn date-time-form [&amp; [{:keys [date time]}]]
  (layout
    (form/form-to
     [:post &quot;.&quot;]
     [:div
      (form/label &quot;date&quot; &quot;日付&quot;)
      (form/text-field &quot;date&quot; date)
      ;; バリデーション失敗時はエラーメッセージ                                                                                                                   
      (vali/on-error :date error-message)]
     [:div
      (form/label &quot;time&quot; &quot;時刻&quot;)
      (form/text-field &quot;time&quot; time)
      ;; バリデーション失敗時はエラーメッセージ                                                                                                                   
      (vali/on-error :time error-message)]
     [:div (form/submit-button &quot;送信&quot;)])))

;;日付チェック用正規表現                                                                                                                                          
(def regex-date-pattern
  (re-pattern &quot;^\\d{4}/(1[0-2]|0?[1-9])/(0?[1-9]|[1-2][0-9]|3[01])$&quot;))

;;時刻チェック用正規表現                                                                                                                                          
(def regex-time-pattern
  (re-pattern &quot;^([01]?[0-9]|2[0-3]):([0-5][0-9])$&quot;))

;;POSTデータのバリデーションルール                                                                                                                                
(defn valid-date-time? [{:keys [date time]}]
  ;; dateをバリデート                                                                                                                                             
  (vali/rule (re-matches regex-date-pattern date)
             ;; 失敗したら :date にエラーメッセージ追加                                                                                                           
             [:date &quot;日付を入力してください(yyyy/MM/dd)&quot;])
  ;; timeをバリデート                                                                                                                                             
  (vali/rule (re-matches regex-time-pattern time)
             ;; 失敗したら :time にエラーメッセージ追加                                                                                                           
             [:time &quot;時刻を入力してください(HH:mm)&quot;])
  ;; バリデーション結果を返す                                                                                                                                     
  (not (vali/errors? :date :time)))

;; POSTされた値を表示                                                                                                                                             
(defn show-date-time [{:keys [date time]}]
  (layout
   [:p (str &quot;日付は「&quot; date &quot;」です。&quot;)]
   [:p (str &quot;時刻は「&quot; time &quot;」です。&quot;)]))

(defroutes app-routes
  (GET &quot;/&quot; [] (date-time-form))
  (POST &quot;/&quot; {param :params}
        (if (valid-date-time? param)
          ;; バリデーション成功                                                                                                                                   
          (show-date-time param)
          ;; バリデーション失敗                                                                                                                                   
          (date-time-form param)))
  (route/not-found &quot;Not Found&quot;))

(def app
  (-&gt; app-routes
      ;;バリデーション用ミドルウェア                                                                                                                              
      vali/wrap-noir-validation
      handler/site))
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendを利用したフォーム認証]]></title>
    <link href="http://matstani.github.com/blog/2013/02/05/form-authentication-using-friend/"/>
    <updated>2013-02-05T20:01:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/02/05/form-authentication-using-friend</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/weavejester/compojure">Compojure</a>プロジェクトの作成手順は<a href="/blog/2013/01/23/create-compojure-project/">こちら</a></p>

<p>Compojureベースのウェブアプリケーションで、フォーム認証を行なってみます。</p>

<p><a href="https://github.com/cemerick/friend">Friend</a>という認証／認可用のライブラリを利用できます。</p>

<h4>依存ライブラリインストール</h4>

<p>project.cljの:dependenciesにFriend、HTML生成ライブラリの<a href="https://github.com/weavejester/hiccup">Hiccup</a>を追記します。
<div><script src='https://gist.github.com/5046194.js?file=project.clj'></script>
<noscript><pre><code>(defproject helloworld &quot;0.1.0-SNAPSHOT&quot;
  :description &quot;FIXME: write description&quot;
  :url &quot;http://example.com/FIXME&quot;
  :dependencies [[org.clojure/clojure &quot;1.4.0&quot;]
                 [compojure &quot;1.1.5&quot;]
                 [hiccup &quot;1.0.2&quot;]
                 [com.cemerick/friend &quot;0.1.3&quot;]]
  :plugins [[lein-ring &quot;0.8.2&quot;]]
  :ring {:handler helloworld.handler/app}
  :profiles
  {:dev {:dependencies [[ring-mock &quot;0.1.3&quot;]]}})</code></pre></noscript></div>
</p>

<p>:dependenciesに追記後、以下のコマンドでライブラリをインストールします。
<code>
$ lein deps
</code></p>

<h4>Friendを使ってフォーム認証</h4>

<p>仮アカウントとしてadmin、userを用意し、それぞれ閲覧できるページが異なる設定にしています。
認証に伴うリダイレクト処理はFriendが行ってくれます。
<div><script src='https://gist.github.com/5046194.js?file=handler.clj'></script>
<noscript><pre><code>(ns helloworld.handler
  (:require [ring.util.response :as response]
            [compojure.core :refer :all]
            [compojure.handler :as handler]
            [compojure.route :as route]
            [hiccup.page :refer [html5]]
            [hiccup.element :refer [link-to]]
            [hiccup.form :as form]
            [cemerick.friend :as friend]
            (cemerick.friend [workflows :as workflows]
                             [credentials :as creds])))

;; 仮のアカウント定義
(def users {&quot;admin&quot; {:username &quot;admin&quot;
                    :password (creds/hash-bcrypt &quot;adminpassword&quot;)
                    :roles #{::admin}}
            &quot;user&quot; {:username &quot;user&quot;
                    :password (creds/hash-bcrypt &quot;userpassword&quot;)
                    :roles #{::user}}})

;; ::admin ロールは ::user ロールを兼ねる
(derive ::admin ::user)

;; ページレイアウト
(defn layout [&amp; content]
  (html5
   [:head [:title &quot;auth and authz using friend.&quot;]]
   [:body
    content]))

;; 認証が必要なページの定義
(defroutes secure-routes
  ;; /admin以下は ::admin ロールが必要
  (context &quot;/admin&quot; request
           (friend/wrap-authorize
            (routes
             (GET &quot;/page1&quot; [] (layout &quot;admin page1.&quot;))
             (GET &quot;/page2&quot; [] (layout &quot;admin page2.&quot;)))
            #{::admin}))
  ;; /user以下は ::user ロールが必要
  (context &quot;/user&quot; request
           (friend/wrap-authorize
            (GET &quot;/private&quot; [] (layout &quot;private page.&quot;))
            #{::user})))

;; indexページ
(def index
  (layout
   [:div
    [:ul
     [:li (link-to &quot;/admin/page1&quot; &quot;Admin page1&quot;)]
     [:li (link-to &quot;/admin/page2&quot; &quot;Admin page2&quot;)]
     [:li (link-to &quot;/user/private&quot; &quot;User's private page.&quot;)]]]
   [:div (link-to &quot;/login&quot; &quot;Login&quot;)]
   [:div (link-to &quot;/logout&quot; &quot;Logout&quot;)]))

(def index-handler
  (GET &quot;/&quot; [] index))

;; ログインフォーム
(def login-form
  (layout
    (form/form-to [:post &quot;/login&quot;]
                  [:div
                   [:div
                    (form/label &quot;username&quot; &quot;user name:&quot;)
                    (form/text-field &quot;username&quot;)]
                   [:div (form/label &quot;password&quot; &quot;password:&quot;)
                    (form/password-field &quot;password&quot;)]
                   [:div (form/submit-button &quot;login!&quot;)]])))

(def login-handler
  (GET &quot;/login&quot; [] login-form))

(defroutes app-routes
  index-handler
  login-handler
  secure-routes
  ;;ログアウトページ
  (friend/logout (ANY &quot;/logout&quot; request (response/redirect &quot;/&quot;)))
  (route/not-found &quot;Not Found&quot;))

(def app
  (-&gt; app-routes
      ;;認証用ミドルウェア（依存ミドルウェアの内側に置く）
      (friend/authenticate {:credential-fn (partial creds/bcrypt-credential-fn users)
                            :workflows [(workflows/interactive-form)]})
      handler/site))
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
