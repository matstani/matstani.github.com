<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | /home/matstani/weblog]]></title>
  <link href="http://matstani.github.com/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://matstani.github.com/"/>
  <updated>2013-07-18T16:10:59+09:00</updated>
  <id>http://matstani.github.com/</id>
  <author>
    <name><![CDATA[Shunsaku MATSUTANI]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojureで引数のデフォルト値を指定する]]></title>
    <link href="http://matstani.github.com/blog/2013/07/18/clojure-default-value/"/>
    <updated>2013-07-18T15:09:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/07/18/clojure-default-value</id>
    <content type="html"><![CDATA[<p><div><script src='https://gist.github.com/6027226.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>参考URL: <a href="http://stackoverflow.com/questions/3208347/how-to-create-default-value-for-function-argument-in-clojure">http://stackoverflow.com/questions/3208347/how-to-create-default-value-for-function-argument-in-clojure</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Clojure] インデックス付きシーケンス]]></title>
    <link href="http://matstani.github.com/blog/2013/06/27/indexed-seq/"/>
    <updated>2013-06-27T16:57:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/06/27/indexed-seq</id>
    <content type="html"><![CDATA[<p>Clojure1.2以前の、<a href="http://clojuredocs.org/clojure_contrib/clojure.contrib.seq/indexed">clojure.contrib.seq/indexed</a>の代替として、インデックス付きシーケンスがほしいときは、以下のコードが使えます。
```</p>

<blockquote><p>(map-indexed vector [:a :b :c :d :e])
;([0 :a] [1 :b] [2 :c] [3 :d] [4 :e])
```</p></blockquote>

<p>例)doseqでループ処理。
```</p>

<blockquote><p>(doseq [[idx item] (map-indexed vector [:a :b :c :d :e])]</p>

<pre><code>    (println (str idx ":" item)))
</code></pre>

<p>;0:a
;1:b
;2:c
;3:d
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojureアプリケーションを動的に書き換える]]></title>
    <link href="http://matstani.github.com/blog/2013/05/20/embed-nrepl/"/>
    <updated>2013-05-20T12:45:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/05/20/embed-nrepl</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/clojure/tools.nrepl">nREPL</a>サーバをClojureアプリケーションに組み込んでおくと、動作中のClojureアプリケーションに接続して、デバッグを行ったり、動作を書き換えたりすることができます。</p>

<p>試しに、デスクトップGUIアプリケーションを動的に書き換えてみます。<br/>
Clojureからは、JavaのSwingを直接利用できますが、せっかくなので、よりClojureっぽく書ける<a href="https://github.com/daveray/seesaw">Seesaw</a>を使ってみます。</p>

<p>project.cljは以下のとおり。</p>

<p><div><script src='https://gist.github.com/5610271.js?file=project.clj'></script>
<noscript><pre><code>(defproject nrepl-test &quot;0.1.0-SNAPSHOT&quot;
  :description &quot;FIXME: write description&quot;
  :url &quot;http://example.com/FIXME&quot;
  :license {:name &quot;Eclipse Public License&quot;
            :url &quot;http://www.eclipse.org/legal/epl-v10.html&quot;}
  :dependencies [[org.clojure/clojure &quot;1.4.0&quot;]
                 [seesaw &quot;1.4.2&quot;]
                 [org.clojure/tools.nrepl &quot;0.2.3&quot;]]
  :main nrepl-test.core)
</code></pre></noscript></div>
</p>

<p>アプリケーションのコードは以下のとおり。</p>

<p><div><script src='https://gist.github.com/5610271.js?file=core.clj'></script>
<noscript><pre><code>(ns nrepl-test.core
  (:require [seesaw.core :refer :all]
            [clojure.tools.nrepl.server :refer [start-server]])
  (:gen-class))

(defonce server (start-server :port 7888))

(def msg &quot;Hello, Seesaw.&quot;)

(def lbl-msg
  (label &quot;&quot;))

(defn set-msg!
  [msg]
  (config! lbl-msg :text msg))

(def btn-show-msg
  (button :text &quot;Show Message&quot;))

(def content (vertical-panel
              :items [lbl-msg
                      btn-show-msg]))

(defn -main
  [&amp; args]
  (invoke-later
   (listen btn-show-msg
           :action
           (fn [e]
             (set-msg! msg)
             (-&gt; e .getSource to-root pack!)))
   (-&gt; (frame :title &quot;Hello&quot;,
              :content content,
              :on-close :exit)
       pack!
       show!)))
</code></pre></noscript></div>
</p>

<p>6行目でnREPLサーバを起動しています。</p>

<p>アプリケーションを起動
<code>
$ lein run
</code></p>

<p>以下のようなウィンドウが表示されます。</p>

<p><img src="/images/blog/2013-05-20_123249.png" alt="ウィンドウ" /></p>

<p>「Show Message」ボタンを押すとメッセージが表示されます。</p>

<p><img src="/images/blog/2013-05-20_123337.png" alt="ウィンドウ" /></p>

<p>このアプリケーションにnREPLクライアントで接続し、動作を書き換えてみます。<br/>
nREPLクライアントとして、<a href="https://github.com/kingtim/nrepl.el">nrepl.el</a>を利用する場合、Emacs内で以下のコマンドを実行します。
<code>
M-x nrepl
Host: 127.0.0.1
Port: 7888
</code>
Portで指定するのは、アプリケーション中のstart-serverで指定したポート番号です。
以下のようにnREPLプロンプトが表示されます。
<code>
; nREPL 0.1.7
user&gt;
</code>
表示されるメッセージを変化させてみます。
<code>
user&gt; (in-ns 'nrepl-test.core) ;namespaceセット
nrepl-test.core&gt; (def msg "Changed Message.") ;msgを再定義
</code>
ボタンを押すと、メッセージが変化します。</p>

<p><img src="/images/blog/2013-05-20_162336.png" alt="ウィンドウ" /></p>

<p>ログ機能を付けてみます。
```
nrepl-test.core> (let [old show-msg-actn]</p>

<pre><code>(defn show-msg-actn
    [e]
    (println "LOG: show-msg-actn") (old e))) ;show-msg-actnを再定義
</code></pre>

<p>```</p>

<p>ボタンを押すと、コンソールにログが表示されるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[screen内のEmacsでparedit.elを使う]]></title>
    <link href="http://matstani.github.com/blog/2013/05/15/paredit-with-screen-emacs/"/>
    <updated>2013-05-15T15:23:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/05/15/paredit-with-screen-emacs</id>
    <content type="html"><![CDATA[<p>Clojureなど、Lisp系言語の編集に便利な<a href="http://emacswiki.org/emacs/ParEdit">paredit.el</a>ですが、<a href="http://www.gnu.org/software/screen/">GNU screen</a>内で起動した<a href="http://www.gnu.org/software/emacs/">Emacs</a>で利用しようとしたところ、Ctrl-矢印キーが使えず(5C, 5Dなどと入力される)、飲み込みや吐き出しの操作ができませんでした。</p>

<p>emacs起動時のコマンドでTERM変数を指定しておくと、とりあえず解決するようです。
<code>
TERM=xterm emacs -nw somefile
</code></p>

<p>参考にしたURL
<a href="http://lists.gnu.org/archive/html/screen-users/2009-12/msg00037.html">http://lists.gnu.org/archive/html/screen-users/2009-12/msg00037.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojureのuseをrequireで置き換える]]></title>
    <link href="http://matstani.github.com/blog/2013/05/10/clojure-require-use/"/>
    <updated>2013-05-10T18:41:00+09:00</updated>
    <id>http://matstani.github.com/blog/2013/05/10/clojure-require-use</id>
    <content type="html"><![CDATA[<p>Clojureで他の名前空間を参照する方法として、requireとuseがありますが、Clojure1.4以降では、require単独でuseと同様にプレフィックス無しでの参照ができるようになっています。</p>

<p>requireにまとめることで、コードが若干すっきりするかもしれません。</p>

<p><div><script src='https://gist.github.com/5553626.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
